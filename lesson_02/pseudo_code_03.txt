
Given a set of integers, return an array with every other value

- define a method that takes one array parameter named `array`
- call the #map method on array with a block argument named `num`
- chain the #with_index method onto the return value of map with a block argument of i
- within the code block remove every-other index value => i.even?
- chain the #compact method to end of call to remove nil values
- implicitly return a new array with the remaining values

START


METHOD(array) 
arr.map.with_index { |num, i| num if i.even? }end.compact
end

METHOD([1,4,7,2,5])

------------(previous answers)-----------------------

make a variable called nums and create an array of 7 integers. Then define a method called every_other with one parameter named (arr). Within the code block, iterate through each (arr) and remove an element for every odd index. Return the new array with the selected values.

START

SET nums = [8,5,0,8,4,2,8,7]

METHOD(arr)
  arr.map
    if element index irb
     is odd?
      element
    else
      next
    end
  end
  arrcode 
end

METHOD(nums)

this is the actual code that ended up working :

nums = [5, 0, 4, 5, 2, 8, 3]

def every_other(arr)
  new_arr = 
  arr.map.with_index do |nums, i|
    if i.zero? || i.even?
      nums
    else
      next
    end
  end
  new_arr.delete_if { |val| val.nil?}
end
every_other(nums)

which could be further shortened too :

def every_other(arr)
  arr.map.with_index do |nums, i|
    (i.zero? || i.even?) ? nums : next
  end.delete_if { |val| val.nil?}
end

every_other(nums)
